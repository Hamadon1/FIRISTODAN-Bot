#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ë–æ—Ç–∏ Telegram –±–∞—Ä–æ–∏ –∏–Ω—Ç–∏—à–æ—Ä–∏ “≥–∞—Ä—Ä”Ø–∑–∞–∏ —Ñ–∏–ª–º“≥–æ –¥–∞—Ä –∫–∞–Ω–∞–ª
–≠“∑–æ–¥–∫—É–Ω–∞–Ω–¥–∞: Claude
–¢–∞—ä—Ä–∏—Ö: 2025
"""

import telebot
import json
import logging
import schedule
import time
import threading
from datetime import datetime, timedelta
from typing import Dict, List, Optional

# ==================== –¢–ê–ù–ó–ò–ú–û–¢ (–ö–û–ù–§–ò–ì–£–†–ê–¢–°–ò–Ø) ====================
BOT_TOKEN = "7007180291:AAGA9O0UCbs6gB2SAme4h2FCOKD9GovagP0"  # Token-–∏ –±–æ—Ç–∞—Ç–æ–Ω—Ä–æ –¥–∞—Ä –∏–Ω “∑–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥
ADMIN_USER_ID = 6862331593  # ID-–∏ Telegram-–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (—Ç–∞–Ω“≥–æ —Ä–∞“õ–∞–º)
CHANNEL_ID = "@kinohoijazob"  # ID-–∏ –∫–∞–Ω–∞–ª —ë username (–º–∞—Å–∞–ª–∞–Ω @mychannel —ë -100xxxxxxxxxx)
DATA_FILE = "bot_data.json"  # –ù–æ–º–∏ —Ñ–∞–π–ª–∏ JSON –±–∞—Ä–æ–∏ –∑–∞—Ö–∏—Ä–∞–∏ –º–∞—ä–ª—É–º–æ—Ç
MAX_QUEUE_SIZE = 10  # –®—É–º–æ—Ä–∞–∏ –º–∞–∫—Å–∏–º–∞–ª–∏–∏ —Ñ–∏–ª–º“≥–æ –¥–∞—Ä –Ω–∞–≤–±–∞—Ç
DEFAULT_POST_TIME = "10:00"  # –í–∞“õ—Ç–∏ –ø–µ—à—Ñ–∞—Ä–∑ –±–∞—Ä–æ–∏ –∏–Ω—Ç–∏—à–æ—Ä

# ==================== –¢–ê–ù–ó–ò–ú–ò LOGGING ====================
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# ==================== –ò–ù–ò–¢–°–ò–ê–õ–ò–ó–ê–¢–°–ò–Ø–ò –ë–û–¢ ====================
bot = telebot.TeleBot(BOT_TOKEN)

# ==================== –°–¢–†–£–ö–¢–£–†–ê–ò –ú–ê–™–õ–£–ú–û–¢ ====================
class BotData:
    def __init__(self):
        self.movie_queue: List[Dict] = []  # –ù–∞–≤–±–∞—Ç–∏ —Ñ–∏–ª–º“≥–æ
        self.post_time: str = DEFAULT_POST_TIME  # –í–∞“õ—Ç–∏ –∏–Ω—Ç–∏—à–æ—Ä
        self.last_post_date: str = ""  # –¢–∞—ä—Ä–∏—Ö–∏ –æ—Ö–∏—Ä–∏–Ω –∏–Ω—Ç–∏—à–æ—Ä
    
    def to_dict(self) -> Dict:
        """–¢–∞–±–¥–∏–ª –¥–æ–¥–∞–Ω–∏ –º–∞—ä–ª—É–º–æ—Ç –±–∞ dict –±–∞—Ä–æ–∏ JSON"""
        return {
            'movie_queue': self.movie_queue,
            'post_time': self.post_time,
            'last_post_date': self.last_post_date
        }
    
    def from_dict(self, data: Dict):
        """–ë–æ—Ä –∫–∞—Ä–¥–∞–Ω–∏ –º–∞—ä–ª—É–º–æ—Ç –∞–∑ dict"""
        self.movie_queue = data.get('movie_queue', [])
        self.post_time = data.get('post_time', DEFAULT_POST_TIME)
        self.last_post_date = data.get('last_post_date', "")

# ==================== –ì–õ–û–ë–ê–õ–ò–ò –ú–ê–™–õ–£–ú–û–¢ ====================
bot_data = BotData()

# ==================== –§–£–ù–ö–°–ò–Ø“≤–û–ò –ö–£–ú–ê–ö”¢ ====================
def save_data():
    """–ó–∞—Ö–∏—Ä–∞–∏ –º–∞—ä–ª—É–º–æ—Ç –±–∞ —Ñ–∞–π–ª–∏ JSON"""
    try:
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(bot_data.to_dict(), f, ensure_ascii=False, indent=2)
        logger.info("–ú–∞—ä–ª—É–º–æ—Ç –±–æ–º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç –∑–∞—Ö–∏—Ä–∞ —à—É–¥")
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ –∑–∞—Ö–∏—Ä–∞–∏ –º–∞—ä–ª—É–º–æ—Ç: {e}")

def load_data():
    """–ë–æ—Ä –∫–∞—Ä–¥–∞–Ω–∏ –º–∞—ä–ª—É–º–æ—Ç –∞–∑ —Ñ–∞–π–ª–∏ JSON"""
    try:
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
        bot_data.from_dict(data)
        logger.info("–ú–∞—ä–ª—É–º–æ—Ç –±–æ–º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç –±–æ—Ä –∫–∞—Ä–¥–∞ —à—É–¥")
    except FileNotFoundError:
        logger.info("–§–∞–π–ª–∏ –º–∞—ä–ª—É–º–æ—Ç —ë—Ñ—Ç –Ω–∞—à—É–¥, –º–∞—ä–ª—É–º–æ—Ç–∏ –Ω–∞–≤ —ç“∑–æ–¥ –º–µ—à–∞–≤–∞–¥")
        save_data()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ –±–æ—Ä –∫–∞—Ä–¥–∞–Ω–∏ –º–∞—ä–ª—É–º–æ—Ç: {e}")

def is_admin(user_id: int) -> bool:
    """–°–∞–Ω“∑–∏—à–∏ “≥—É“õ—É“õ–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"""
    return user_id == ADMIN_USER_ID

def get_next_post_time() -> str:
    """–ì–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ –≤–∞“õ—Ç–∏ –∏–Ω—Ç–∏—à–æ—Ä–∏ –Ω–∞–≤–±–∞—Ç”£"""
    try:
        now = datetime.now()
        post_hour, post_minute = map(int, bot_data.post_time.split(':'))
        
        # –ú—É–∞–π—è–Ω –∫–∞—Ä–¥–∞–Ω–∏ —Ç–∞—ä—Ä–∏—Ö–∏ –∏–Ω—Ç–∏—à–æ—Ä–∏ –Ω–∞–≤–±–∞—Ç”£
        next_post = now.replace(hour=post_hour, minute=post_minute, second=0, microsecond=0)
        
        # –ê–≥–∞—Ä –≤–∞“õ—Ç –≥—É–∑–∞—à—Ç–∞ –±–æ—à–∞–¥, –±–∞—Ä–æ–∏ —Ñ–∞—Ä–¥–æ –º—É–∞–π—è–Ω –º–µ–∫—É–Ω–µ–º
        if next_post <= now:
            next_post += timedelta(days=1)
        
        return next_post.strftime("%Y-%m-%d %H:%M")
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ “≥–∏—Å–æ–±–∏ –≤–∞“õ—Ç–∏ –Ω–∞–≤–±–∞—Ç”£: {e}")
        return "–ù–æ–º—É–∞–π—è–Ω"

def post_movie():
    """–ò–Ω—Ç–∏—à–æ—Ä–∏ —Ñ–∏–ª–º–∏ –Ω–∞–≤–±–∞—Ç”£ –¥–∞—Ä –∫–∞–Ω–∞–ª"""
    try:
        if not bot_data.movie_queue:
            logger.info("–ù–∞–≤–±–∞—Ç–∏ —Ñ–∏–ª–º“≥–æ —Ö–æ–ª”£ –∞—Å—Ç")
            return
        
        # –ì–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ —Ñ–∏–ª–º–∏ –∞–≤–≤–∞–ª –∞–∑ –Ω–∞–≤–±–∞—Ç
        movie = bot_data.movie_queue.pop(0)
        
        # –ò–Ω—Ç–∏—à–æ—Ä–∏ —Ñ–∏–ª–º –¥–∞—Ä –∫–∞–Ω–∞–ª
        bot.send_video(
            chat_id=CHANNEL_ID,
            video=movie['file_id'],
            caption=movie.get('caption', ''),
            parse_mode='HTML'
        )
        
        # –ù–∞–≤—Å–æ–∑–∏–∏ —Ç–∞—ä—Ä–∏—Ö–∏ –æ—Ö–∏—Ä–∏–Ω –∏–Ω—Ç–∏—à–æ—Ä
        bot_data.last_post_date = datetime.now().strftime("%Y-%m-%d")
        
        # –ó–∞—Ö–∏—Ä–∞–∏ –º–∞—ä–ª—É–º–æ—Ç
        save_data()
        
        logger.info(f"–§–∏–ª–º –±–æ–º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç –∏–Ω—Ç–∏—à–æ—Ä —à—É–¥: {movie.get('caption', '–ë–µ —Å–∞—Ä–ª–∞–≤“≥–∞')}")
        
        # –û–≥–æ“≥ –∫–∞—Ä–¥–∞–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        try:
            bot.send_message(
                ADMIN_USER_ID,
                f"‚úÖ –§–∏–ª–º –±–æ–º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç –∏–Ω—Ç–∏—à–æ—Ä —à—É–¥!\n\n"
                f"üìù –°–∞—Ä–ª–∞–≤“≥–∞: {movie.get('caption', '–ë–µ —Å–∞—Ä–ª–∞–≤“≥–∞')}\n"
                f"‚è∞ –í–∞“õ—Ç: {datetime.now().strftime('%Y-%m-%d %H:%M')}\n"
                f"üìä –§–∏–ª–º“≥–æ–∏ –±–æ“õ–∏–º–æ–Ω–¥–∞ –¥–∞—Ä –Ω–∞–≤–±–∞—Ç: {len(bot_data.movie_queue)}"
            )
        except Exception as e:
            logger.error(f"–•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ –æ–≥–æ“≥–∫—É–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {e}")
            
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ –∏–Ω—Ç–∏—à–æ—Ä–∏ —Ñ–∏–ª–º: {e}")
        try:
            bot.send_message(
                ADMIN_USER_ID,
                f"‚ùå –•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ –∏–Ω—Ç–∏—à–æ—Ä–∏ —Ñ–∏–ª–º: {str(e)}"
            )
        except:
            pass

def setup_scheduler():
    """–¢–∞–Ω–∑–∏–º–∏ “∑–∞–¥–≤–∞–ª–∏ –∏–Ω—Ç–∏—à–æ—Ä"""
    schedule.clear()  # –ü–æ–∫ –∫–∞—Ä–¥–∞–Ω–∏ “∑–∞–¥–≤–∞–ª–∏ “õ–∞–±–ª”£
    schedule.every().day.at(bot_data.post_time).do(post_movie)
    logger.info(f"“∂–∞–¥–≤–∞–ª–∏ –∏–Ω—Ç–∏—à–æ—Ä —Ç–∞–Ω–∑–∏–º —à—É–¥ –±–∞—Ä–æ–∏ —Å–æ–∞—Ç–∏ {bot_data.post_time}")

def scheduler_thread():
    """Thread –±–∞—Ä–æ–∏ –∫–æ—Ä–∏ “∑–∞–¥–≤–∞–ª"""
    while True:
        try:
            schedule.run_pending()
            time.sleep(60)  # –°–∞–Ω“∑–∏—à “≥–∞—Ä –¥–∞“õ–∏“õ–∞
        except Exception as e:
            logger.error(f"–•–∞—Ç–æ–≥”£ –¥–∞—Ä scheduler thread: {e}")
            time.sleep(60)

# ==================== –§–ê–†–ú–û–ù“≤–û–ò –ë–û–¢ ====================

@bot.message_handler(commands=['start', 'help'])
def handle_start_help(message):
    """–ö–æ—Ä–∫–∞—Ä–¥–∏ —Ñ–∞—Ä–º–æ–Ω–∏ /start –≤–∞ /help"""
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚ùå –®—É–º–æ “≥—É“õ—É“õ–∏ –∏—Å—Ç–∏—Ñ–æ–¥–∞–∏ –∏–Ω –±–æ—Ç—Ä–æ –Ω–∞–¥–æ—Ä–µ–¥.")
        return
    
    help_text = """
üé¨ **–ë–æ—Ç–∏ –∏–Ω—Ç–∏—à–æ—Ä–∏ —Ñ–∏–ª–º“≥–æ**

**–§–∞—Ä–º–æ–Ω“≥–æ–∏ –¥–∞—Å—Ç—Ä–∞—Å:**

üéØ **–ê—Å–æ—Å”£:**
‚Ä¢ –ë–∞—Ä–æ–∏ –∏–ª–æ–≤–∞ –∫–∞—Ä–¥–∞–Ω–∏ —Ñ–∏–ª–º - —Ç–∞–Ω“≥–æ —Ñ–∞–π–ª–∏ –≤–∏–¥–µ–æ—Ä–æ —Ñ–∏—Ä–∏—Å—Ç–µ–¥
‚Ä¢ `/status` - –í–∞–∑—ä–∏ –∫—É–Ω—É–Ω”£
‚Ä¢ `/listmovies` - –†”Ø–π—Ö–∞—Ç–∏ —Ñ–∏–ª–º“≥–æ –¥–∞—Ä –Ω–∞–≤–±–∞—Ç

‚öôÔ∏è **–ò–¥–æ—Ä–∞–∫—É–Ω”£:**
‚Ä¢ `/remove <—Ä–∞“õ–∞–º>` - –ù–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ —Ñ–∏–ª–º –∞–∑ –Ω–∞–≤–±–∞—Ç
‚Ä¢ `/settime HH:MM` - –¢–∞“ì–∏—Ä–∏ –≤–∞“õ—Ç–∏ –∏–Ω—Ç–∏—à–æ—Ä
‚Ä¢ `/forcepost` - –ò–Ω—Ç–∏—à–æ—Ä–∏ —Ñ–æ—Ä”£

‚ùì `/help` - –ò–Ω –ø–∞—ë–º

**–ú–∞—ä–ª—É–º–æ—Ç:**
‚Ä¢ “≤–∞–¥–¥–∏ –∞–∫—Å–∞—Ä–∏ –Ω–∞–≤–±–∞—Ç: {max_queue} —Ñ–∏–ª–º
‚Ä¢ –í–∞“õ—Ç–∏ –∫—É–Ω—É–Ω–∏–∏ –∏–Ω—Ç–∏—à–æ—Ä: {post_time}
‚Ä¢ –§–∏–ª–º“≥–æ “≥–∞—Ä —Ä”Ø–∑ –±–∞ —Ç–∞–≤—Ä–∏ —Ö—É–¥–∫–æ—Ä –∏–Ω—Ç–∏—à–æ—Ä –º–µ—à–∞–≤–∞–Ω–¥
    """.format(
        max_queue=MAX_QUEUE_SIZE,
        post_time=bot_data.post_time
    )
    
    bot.reply_to(message, help_text, parse_mode='Markdown')
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ñ–∞—Ä–º–æ–Ω–∏ help-—Ä–æ –¥–∞—Ä—Ö–æ—Å—Ç –∫–∞—Ä–¥")

@bot.message_handler(commands=['status'])
def handle_status(message):
    """–ö–æ—Ä–∫–∞—Ä–¥–∏ —Ñ–∞—Ä–º–æ–Ω–∏ /status"""
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚ùå –®—É–º–æ “≥—É“õ—É“õ–∏ –∏—Å—Ç–∏—Ñ–æ–¥–∞–∏ –∏–Ω –±–æ—Ç—Ä–æ –Ω–∞–¥–æ—Ä–µ–¥.")
        return
    
    queue_count = len(bot_data.movie_queue)
    next_movie = bot_data.movie_queue[0]['caption'] if bot_data.movie_queue else "“≤–µ“∑ —Ñ–∏–ª–º –¥–∞—Ä –Ω–∞–≤–±–∞—Ç –Ω–µ—Å—Ç"
    next_post_time = get_next_post_time()
    
    status_text = f"""
üìä **–í–∞–∑—ä–∏ –∫—É–Ω—É–Ω”£:**

üé¨ –§–∏–ª–º“≥–æ –¥–∞—Ä –Ω–∞–≤–±–∞—Ç: {queue_count}/{MAX_QUEUE_SIZE}
‚è∞ –í–∞“õ—Ç–∏ –∏–Ω—Ç–∏—à–æ—Ä: {bot_data.post_time}
üïê –ò–Ω—Ç–∏—à–æ—Ä–∏ –Ω–∞–≤–±–∞—Ç”£: {next_post_time}
üé≠ –§–∏–ª–º–∏ –Ω–∞–≤–±–∞—Ç”£: {next_movie}
üìÖ –û—Ö–∏—Ä–∏–Ω –∏–Ω—Ç–∏—à–æ—Ä: {bot_data.last_post_date if bot_data.last_post_date else '“≤–∞–Ω”Ø–∑ –∏–Ω—Ç–∏—à–æ—Ä –Ω–∞—à—É–¥–∞–∞—Å—Ç'}
    """
    
    bot.reply_to(message, status_text, parse_mode='Markdown')
    logger.info("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–∞—ä–ª—É–º–æ—Ç–∏ status-—Ä–æ –¥–∞—Ä—Ö–æ—Å—Ç –∫–∞—Ä–¥")

@bot.message_handler(commands=['listmovies'])
def handle_list_movies(message):
    """–ö–æ—Ä–∫–∞—Ä–¥–∏ —Ñ–∞—Ä–º–æ–Ω–∏ /listmovies"""
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚ùå –®—É–º–æ “≥—É“õ—É“õ–∏ –∏—Å—Ç–∏—Ñ–æ–¥–∞–∏ –∏–Ω –±–æ—Ç—Ä–æ –Ω–∞–¥–æ—Ä–µ–¥.")
        return
    
    if not bot_data.movie_queue:
        bot.reply_to(message, "üìù –ù–∞–≤–±–∞—Ç–∏ —Ñ–∏–ª–º“≥–æ —Ö–æ–ª”£ –∞—Å—Ç.")
        return
    
    movies_text = "üìù **–†”Ø–π—Ö–∞—Ç–∏ —Ñ–∏–ª–º“≥–æ –¥–∞—Ä –Ω–∞–≤–±–∞—Ç:**\n\n"
    for i, movie in enumerate(bot_data.movie_queue, 1):
        caption = movie.get('caption', '–ë–µ —Å–∞—Ä–ª–∞–≤“≥–∞')
        movies_text += f"{i}. {caption}\n"
    
    bot.reply_to(message, movies_text, parse_mode='Markdown')
    logger.info("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä”Ø–π—Ö–∞—Ç–∏ —Ñ–∏–ª–º“≥–æ—Ä–æ –¥–∞—Ä—Ö–æ—Å—Ç –∫–∞—Ä–¥")

@bot.message_handler(commands=['remove'])
def handle_remove_movie(message):
    """–ö–æ—Ä–∫–∞—Ä–¥–∏ —Ñ–∞—Ä–º–æ–Ω–∏ /remove"""
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚ùå –®—É–º–æ “≥—É“õ—É“õ–∏ –∏—Å—Ç–∏—Ñ–æ–¥–∞–∏ –∏–Ω –±–æ—Ç—Ä–æ –Ω–∞–¥–æ—Ä–µ–¥.")
        return
    
    try:
        # –ì–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ —Ä–∞“õ–∞–º–∏ —Ñ–∏–ª–º –∞–∑ —Ñ–∞—Ä–º–æ–Ω
        args = message.text.split()
        if len(args) != 2:
            bot.reply_to(message, "‚ùå –ò—Å—Ç–∏—Ñ–æ–¥–∞–∏ –¥—É—Ä—É—Å—Ç: /remove <—Ä–∞“õ–∞–º>\n–ú–∏—Å–æ–ª: /remove 2")
            return
        
        movie_index = int(args[1]) - 1  # –¢–∞–±–¥–∏–ª –±–∞ index (–∞–∑ 0 —à—É—Ä”Ø—ä –º–µ—à–∞–≤–∞–¥)
        
        if movie_index < 0 or movie_index >= len(bot_data.movie_queue):
            bot.reply_to(message, f"‚ùå –†–∞“õ–∞–º–∏ –Ω–æ–¥—É—Ä—É—Å—Ç. –†–∞“õ–∞–º –±–æ—è–¥ –∞–∑ 1 —Ç–æ {len(bot_data.movie_queue)} –±–æ—à–∞–¥.")
            return
        
        # –ù–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ —Ñ–∏–ª–º
        removed_movie = bot_data.movie_queue.pop(movie_index)
        save_data()
        
        bot.reply_to(
            message, 
            f"‚úÖ –§–∏–ª–º –∞–∑ –Ω–∞–≤–±–∞—Ç –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞ —à—É–¥:\nüìù {removed_movie.get('caption', '–ë–µ —Å–∞—Ä–ª–∞–≤“≥–∞')}"
        )
        logger.info(f"–§–∏–ª–º –∞–∑ –Ω–∞–≤–±–∞—Ç –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞ —à—É–¥: {removed_movie.get('caption', '–ë–µ —Å–∞—Ä–ª–∞–≤“≥–∞')}")
        
    except ValueError:
        bot.reply_to(message, "‚ùå –†–∞“õ–∞–º–∏ –Ω–æ–¥—É—Ä—É—Å—Ç. –õ—É—Ç—Ñ–∞–Ω —Ä–∞“õ–∞–º–∏ –¥—É—Ä—É—Å—Ç –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥.")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –•–∞—Ç–æ–≥”£: {str(e)}")
        logger.error(f"–•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ —Ñ–∏–ª–º: {e}")

@bot.message_handler(commands=['settime'])
def handle_set_time(message):
    """–ö–æ—Ä–∫–∞—Ä–¥–∏ —Ñ–∞—Ä–º–æ–Ω–∏ /settime"""
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚ùå –®—É–º–æ “≥—É“õ—É“õ–∏ –∏—Å—Ç–∏—Ñ–æ–¥–∞–∏ –∏–Ω –±–æ—Ç—Ä–æ –Ω–∞–¥–æ—Ä–µ–¥.")
        return
    
    try:
        # –ì–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ –≤–∞“õ—Ç –∞–∑ —Ñ–∞—Ä–º–æ–Ω
        args = message.text.split()
        if len(args) != 2:
            bot.reply_to(message, "‚ùå –ò—Å—Ç–∏—Ñ–æ–¥–∞–∏ –¥—É—Ä—É—Å—Ç: /settime HH:MM\n–ú–∏—Å–æ–ª: /settime 14:30")
            return
        
        new_time = args[1]
        
        # –°–∞–Ω“∑–∏—à–∏ —Ñ–æ—Ä–º–∞—Ç–∏ –≤–∞“õ—Ç
        time_parts = new_time.split(':')
        if len(time_parts) != 2:
            raise ValueError("–§–æ—Ä–º–∞—Ç–∏ –Ω–æ–¥—É—Ä—É—Å—Ç")
        
        hour, minute = int(time_parts[0]), int(time_parts[1])
        
        if not (0 <= hour <= 23) or not (0 <= minute <= 59):
            raise ValueError("–í–∞“õ—Ç–∏ –Ω–æ–¥—É—Ä—É—Å—Ç")
        
        # –¢–∞–Ω–∑–∏–º–∏ –≤–∞“õ—Ç–∏ –Ω–∞–≤
        bot_data.post_time = new_time
        setup_scheduler()  # –ù–∞–≤—Å–æ–∑–∏–∏ “∑–∞–¥–≤–∞–ª
        save_data()
        
        bot.reply_to(
            message, 
            f"‚úÖ –í–∞“õ—Ç–∏ –∏–Ω—Ç–∏—à–æ—Ä —Ç–∞“ì–∏—Ä –¥–æ–¥–∞ —à—É–¥ –±–∞: {new_time}\n"
            f"‚è∞ –ò–Ω—Ç–∏—à–æ—Ä–∏ –Ω–∞–≤–±–∞—Ç”£: {get_next_post_time()}"
        )
        logger.info(f"–í–∞“õ—Ç–∏ –∏–Ω—Ç–∏—à–æ—Ä —Ç–∞“ì–∏—Ä –¥–æ–¥–∞ —à—É–¥ –±–∞: {new_time}")
        
    except ValueError:
        bot.reply_to(message, "‚ùå –§–æ—Ä–º–∞—Ç–∏ –≤–∞“õ—Ç –Ω–æ–¥—É—Ä—É—Å—Ç. –ò—Å—Ç–∏—Ñ–æ–¥–∞ –±–∞—Ä–µ–¥: HH:MM (–º–∞—Å–∞–ª–∞–Ω, 14:30)")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –•–∞—Ç–æ–≥”£: {str(e)}")
        logger.error(f"–•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ —Ç–∞“ì–∏—Ä–∏ –≤–∞“õ—Ç: {e}")

@bot.message_handler(commands=['forcepost'])
def handle_force_post(message):
    """–ö–æ—Ä–∫–∞—Ä–¥–∏ —Ñ–∞—Ä–º–æ–Ω–∏ /forcepost"""
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚ùå –®—É–º–æ “≥—É“õ—É“õ–∏ –∏—Å—Ç–∏—Ñ–æ–¥–∞–∏ –∏–Ω –±–æ—Ç—Ä–æ –Ω–∞–¥–æ—Ä–µ–¥.")
        return
    
    if not bot_data.movie_queue:
        bot.reply_to(message, "‚ùå –ù–∞–≤–±–∞—Ç–∏ —Ñ–∏–ª–º“≥–æ —Ö–æ–ª”£ –∞—Å—Ç.")
        return
    
    bot.reply_to(message, "‚è≥ –ò–Ω—Ç–∏—à–æ—Ä–∏ —Ñ–∏–ª–º...")
    post_movie()
    
    logger.info("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–Ω—Ç–∏—à–æ—Ä–∏ —Ñ–æ—Ä”£ –¥–∞—Ä—Ö–æ—Å—Ç –∫–∞—Ä–¥")

@bot.message_handler(content_types=['video'])
def handle_video(message):
    """–ö–æ—Ä–∫–∞—Ä–¥–∏ —Ñ–∞–π–ª“≥–æ–∏ –≤–∏–¥–µ–æ”£"""
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚ùå –®—É–º–æ “≥—É“õ—É“õ–∏ –∏—Å—Ç–∏—Ñ–æ–¥–∞–∏ –∏–Ω –±–æ—Ç—Ä–æ –Ω–∞–¥–æ—Ä–µ–¥.")
        return
    
    try:
        # –°–∞–Ω“∑–∏—à–∏ “∑–æ–∏ —Ö–æ–ª”£ –¥–∞—Ä –Ω–∞–≤–±–∞—Ç
        if len(bot_data.movie_queue) >= MAX_QUEUE_SIZE:
            bot.reply_to(
                message, 
                f"‚ùå –ù–∞–≤–±–∞—Ç –ø—É—Ä –∞—Å—Ç! (“≤–∞–¥–¥–∏ –∞–∫—Å–∞—Ä: {MAX_QUEUE_SIZE})\n"
                f"–õ—É—Ç—Ñ–∞–Ω —è–∫—á–∞–Ω–¥ —Ñ–∏–ª–º—Ä–æ –Ω–µ—Å—Ç –∫—É–Ω–µ–¥ —ë –∏–Ω—Ç–∏–∑–æ—Ä —à–∞–≤–µ–¥."
            )
            return
        
        # –ò–ª–æ–≤–∞ –∫–∞—Ä–¥–∞–Ω–∏ —Ñ–∏–ª–º –±–∞ –Ω–∞–≤–±–∞—Ç
        movie_data = {
            'file_id': message.video.file_id,
            'caption': message.caption or f"–§–∏–ª–º #{len(bot_data.movie_queue) + 1}",
            'added_date': datetime.now().strftime("%Y-%m-%d %H:%M")
        }
        
        bot_data.movie_queue.append(movie_data)
        save_data()
        
        bot.reply_to(
            message,
            f"‚úÖ –§–∏–ª–º –±–∞ –Ω–∞–≤–±–∞—Ç –∏–ª–æ–≤–∞ –∫–∞—Ä–¥–∞ —à—É–¥!\n\n"
            f"üìù –°–∞—Ä–ª–∞–≤“≥–∞: {movie_data['caption']}\n"
            f"üî¢ “∂–æ–π–∏ –¥–∞—Ä –Ω–∞–≤–±–∞—Ç: {len(bot_data.movie_queue)}\n"
            f"‚è∞ –ò–Ω—Ç–∏—à–æ—Ä–∏ —Ç–∞—Ö–º–∏–Ω”£: {get_next_post_time()}"
        )
        
        logger.info(f"–§–∏–ª–º–∏ –Ω–∞–≤ –∏–ª–æ–≤–∞ –∫–∞—Ä–¥–∞ —à—É–¥: {movie_data['caption']}")
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ –∏–ª–æ–≤–∞ –∫–∞—Ä–¥–∞–Ω–∏ —Ñ–∏–ª–º: {str(e)}")
        logger.error(f"–•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ –∫–æ—Ä–∫–∞—Ä–¥–∏ –≤–∏–¥–µ–æ: {e}")

@bot.message_handler(func=lambda message: True)
def handle_other_messages(message):
    """–ö–æ—Ä–∫–∞—Ä–¥–∏ –¥–∏–≥–∞—Ä –ø–∞—ë–º“≥–æ"""
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚ùå –®—É–º–æ “≥—É“õ—É“õ–∏ –∏—Å—Ç–∏—Ñ–æ–¥–∞–∏ –∏–Ω –±–æ—Ç—Ä–æ –Ω–∞–¥–æ—Ä–µ–¥.")
        return
    
    bot.reply_to(
        message, 
        "‚ùì –§–∞—Ä–º–æ–Ω–∏ –Ω–æ–º–∞—ä–ª—É–º. –ë–∞—Ä–æ–∏ –¥–∏–¥–∞–Ω–∏ —Ñ–∞—Ä–º–æ–Ω“≥–æ–∏ –¥–∞—Å—Ç—Ä–∞—Å /help-—Ä–æ –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±–∞—Ä–µ–¥."
    )

# ==================== –§–£–ù–ö–°–ò–Ø–ò –ê–°–û–°”¢ ====================
def main():
    """–§—É–Ω–∫—Å–∏—è–∏ –∞—Å–æ—Å–∏–∏ –±–∞—Ä–Ω–æ–º–∞"""
    logger.info("–û“ì–æ–∑–∏ –∫–æ—Ä–∏ –±–æ—Ç...")
    
    try:
        # –ë–æ—Ä –∫–∞—Ä–¥–∞–Ω–∏ –º–∞—ä–ª—É–º–æ—Ç
        load_data()
        
        # –¢–∞–Ω–∑–∏–º–∏ “∑–∞–¥–≤–∞–ª
        setup_scheduler()
        
        # –û“ì–æ–∑–∏ thread –±–∞—Ä–æ–∏ “∑–∞–¥–≤–∞–ª
        scheduler_thread_obj = threading.Thread(target=scheduler_thread, daemon=True)
        scheduler_thread_obj.start()
        
        logger.info("–ë–æ—Ç –æ–º–æ–¥–∞ –∞—Å—Ç!")
        
        # –û–≥–æ“≥ –∫–∞—Ä–¥–∞–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–∞—Ä –±–æ—Ä–∞–∏ –æ“ì–æ–∑–∏ –∫–æ—Ä
        try:
            bot.send_message(
                ADMIN_USER_ID,
                f"üöÄ –ë–æ—Ç –æ“ì–æ–∑ —ë—Ñ—Ç!\n\n"
                f"üìä –§–∏–ª–º“≥–æ –¥–∞—Ä –Ω–∞–≤–±–∞—Ç: {len(bot_data.movie_queue)}\n"
                f"‚è∞ –í–∞“õ—Ç–∏ –∏–Ω—Ç–∏—à–æ—Ä: {bot_data.post_time}\n"
                f"üïê –ò–Ω—Ç–∏—à–æ—Ä–∏ –Ω–∞–≤–±–∞—Ç”£: {get_next_post_time()}"
            )
        except Exception as e:
            logger.error(f"–ù–∞–º–µ—Ç–∞–≤–æ–Ω–∞–¥ –±–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–∞—ë–º —Ñ–∏—Ä–∏—Å—Ç–∞–¥: {e}")
        
        # –û“ì–æ–∑–∏ polling
        bot.infinity_polling(timeout=60, long_polling_timeout=60)
        
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –∞–∑ “∑–æ–Ω–∏–±–∏ –∫–æ—Ä–±–∞—Ä “õ–∞—Ç—ä –∫–∞—Ä–¥–∞ —à—É–¥")
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ–≥–∏–∏ —É–º—É–º”£: {e}")
    finally:
        logger.info("–ë–æ—Ç “õ–∞—Ç—ä –∫–∞—Ä–¥–∞ —à—É–¥")

if __name__ == "__main__":
    main()
