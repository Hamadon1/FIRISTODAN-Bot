import telebot
from telebot import types
import sqlite3
import schedule
import time
import threading
from datetime import datetime, timedelta
import os

# –¢–∞–Ω–∑–∏–º–æ—Ç–∏ –±–æ—Ç
BOT_TOKEN = "7268398403:AAGsmC5e19hOexTV8nSaKUwbaq5wbjYKUg8"  # –¢–æ–∫–µ–Ω–∏ –±–æ—Ç–∞—Ç–æ–Ω—Ä–æ –¥–∞—Ä –∏–Ω “∑–æ –≥—É–∑–æ—Ä–µ–¥
ADMIN_ID = 6862331593  # ID –∞–¥–º–∏–Ω—Ä–æ –¥–∞—Ä –∏–Ω “∑–æ –≥—É–∑–æ—Ä–µ–¥
CHANNEL_USERNAME = "@kinohoijazob"  # –ù–æ–º–∏ –∫–∞–Ω–∞–ª (–±–æ @)
DB_NAME = 'movies_v2.db' # –ù–æ–º–∏ —Ñ–∞–π–ª–∏ –±–∞–∑–∞–∏ –¥–æ–¥–∞“≥–æ

# “≤–æ–ª–∞—Ç“≥–æ–∏ –∫–æ—Ä–±–∞—Ä –±–∞—Ä–æ–∏ –∏–¥–æ—Ä–∞–∫—É–Ω–∏–∏ “∑–∞—Ä–∞—ë–Ω
USER_STATE_NONE = 0
USER_STATE_WAITING_MOVIE_FILE = 1
USER_STATE_WAITING_MOVIE_TITLE = 2
USER_STATE_WAITING_MOVIE_DESCRIPTION = 3
USER_STATE_WAITING_DELETE_MOVIE_ID = 4
USER_STATE_WAITING_PUBLISH_NOW_MOVIE_ID = 5

user_data = {} # –ë–∞—Ä–æ–∏ –Ω–∏–≥–æ“≥ –¥–æ—à—Ç–∞–Ω–∏ –º–∞—ä–ª—É–º–æ—Ç–∏ –º—É–≤–∞“õ“õ–∞—Ç–∏–∏ –∫–æ—Ä–±–∞—Ä “≥–∞–Ω–≥–æ–º–∏ –∏–ª–æ–≤–∞–∏ —Ñ–∏–ª–º

bot = telebot.TeleBot(BOT_TOKEN)

# --- –§—É–Ω–∫—Å–∏—è“≥–æ–∏ –±–∞–∑–∞–∏ –¥–æ–¥–∞“≥–æ ---
def init_database():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS movies (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT NOT NULL,
            description TEXT,
            file_id TEXT NOT NULL,
            file_type TEXT NOT NULL,
            is_published BOOLEAN DEFAULT FALSE,
            created_date DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS publish_schedule (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            movie_id INTEGER UNIQUE,
            publish_date DATE NOT NULL,
            is_published BOOLEAN DEFAULT FALSE,
            FOREIGN KEY (movie_id) REFERENCES movies (id) ON DELETE CASCADE
        )
    ''')
    conn.commit()
    conn.close()

def save_movie_to_db(title, description, file_id, file_type):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO movies (title, description, file_id, file_type)
        VALUES (?, ?, ?, ?)
    ''', (title, description, file_id, file_type))
    movie_id = cursor.lastrowid
    conn.commit()
    conn.close()
    return movie_id

def schedule_movie(movie_id):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    # –°–∞–Ω–∞–∏ –æ—Ö–∏—Ä–∏–Ω–∏ –Ω–∞—à—Ä—Ä–æ —ë—Ñ—Ç–∞–Ω
    cursor.execute("SELECT MAX(publish_date) FROM publish_schedule")
    last_publish_date_str = cursor.fetchone()[0]
    
    next_publish_date = datetime.now().date() + timedelta(days=1) # –ê–≥–∞—Ä “∑–∞–¥–≤–∞–ª —Ö–æ–ª”£ –±–æ—à–∞–¥
    if last_publish_date_str:
        last_publish_date = datetime.strptime(last_publish_date_str, '%Y-%m-%d').date()
        if last_publish_date >= next_publish_date: # –ê–≥–∞—Ä —Å–∞–Ω–∞–∏ –æ—Ö–∏—Ä–∏–Ω –∞–∑ —Ñ–∞—Ä–¥–æ –¥–µ—Ä—Ç–∞—Ä –±–æ—à–∞–¥
             next_publish_date = last_publish_date + timedelta(days=1)
        # –ê–≥–∞—Ä —Å–∞–Ω–∞–∏ –æ—Ö–∏—Ä–∏–Ω –¥–∞—Ä –≥—É–∑–∞—à—Ç–∞ –±–æ—à–∞–¥, –∞–∑ —Ñ–∞—Ä–¥–æ —Å–∞—Ä –º–µ–∫—É–Ω–µ–º
        elif last_publish_date < datetime.now().date():
             next_publish_date = datetime.now().date() + timedelta(days=1)


    cursor.execute('''
        INSERT INTO publish_schedule (movie_id, publish_date)
        VALUES (?, ?)
    ''', (movie_id, next_publish_date.strftime('%Y-%m-%d')))
    conn.commit()
    conn.close()
    return next_publish_date

def get_movie_by_id(movie_id):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT id, title, description, file_id, file_type FROM movies WHERE id = ?", (movie_id,))
    movie = cursor.fetchone()
    conn.close()
    return movie

def delete_movie_from_db(movie_id):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    # ON DELETE CASCADE –±–æ—è–¥ —Ñ–∏–ª–º—Ä–æ –∞–∑ publish_schedule –Ω–∏–∑ —Ç–æ–∑–∞ –∫—É–Ω–∞–¥
    cursor.execute("DELETE FROM movies WHERE id = ?", (movie_id,))
    deleted_rows = cursor.rowcount
    conn.commit()
    conn.close()
    return deleted_rows > 0

def get_pending_movies():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''
        SELECT m.id, m.title, ps.publish_date
        FROM movies m
        JOIN publish_schedule ps ON m.id = ps.movie_id
        WHERE ps.is_published = FALSE
        ORDER BY ps.publish_date ASC
    ''')
    movies = cursor.fetchall()
    conn.close()
    return movies

# --- –§—É–Ω–∫—Å–∏—è“≥–æ–∏ —ë—Ä–∏—Ä–∞—Å–æ–Ω ---
def is_admin(user_id):
    return user_id == ADMIN_ID

def set_user_state(user_id, state):
    user_data.setdefault(user_id, {})['state'] = state

def get_user_state(user_id):
    return user_data.get(user_id, {}).get('state', USER_STATE_NONE)

def clear_user_data(user_id):
    if user_id in user_data:
        del user_data[user_id]

def create_main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn_add = types.KeyboardButton("‚ûï –ò–ª–æ–≤–∞–∏ —Ñ–∏–ª–º")
    btn_pending = types.KeyboardButton("üóì –†”Ø–π—Ö–∞—Ç–∏ –∏–Ω—Ç–∏–∑–æ—Ä”£")
    btn_publish_now = types.KeyboardButton("üöÄ –ù–∞—à—Ä–∏ —Ñ–∞–≤—Ä”£")
    btn_delete = types.KeyboardButton("üóëÔ∏è –¢–æ–∑–∞ –∫–∞—Ä–¥–∞–Ω–∏ —Ñ–∏–ª–º")
    btn_status = types.KeyboardButton("üìä “≤–æ–ª–∞—Ç–∏ –±–æ—Ç")
    btn_help = types.KeyboardButton("‚ùì –ö”Ø–º–∞–∫")
    markup.add(btn_add, btn_pending, btn_publish_now, btn_delete, btn_status, btn_help)
    return markup

def create_cancel_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton("‚Ü™Ô∏è –ë–µ–∫–æ—Ä –∫–∞—Ä–¥–∞–Ω"))
    return markup

# --- –§—É–Ω–∫—Å–∏—è“≥–æ–∏ –Ω–∞—à—Ä ---
def publish_movie_to_channel(movie_id_to_publish=None, scheduled_publish=True):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    movie_to_post = None
    schedule_id_to_update = None

    if movie_id_to_publish: # –ë–∞—Ä–æ–∏ –Ω–∞—à—Ä–∏ —Ñ–∞–≤—Ä”£
        cursor.execute('''
            SELECT m.id, m.title, m.description, m.file_id, m.file_type, ps.id 
            FROM movies m
            LEFT JOIN publish_schedule ps ON m.id = ps.movie_id
            WHERE m.id = ? AND m.is_published = FALSE
        ''', (movie_id_to_publish,))
        result = cursor.fetchone()
        if result:
            movie_id, title, description, file_id, file_type, schedule_id = result
            movie_to_post = (movie_id, title, description, file_id, file_type)
            schedule_id_to_update = schedule_id # –ú–µ—Ç–∞–≤–æ–Ω–∞–¥ None –±–æ—à–∞–¥, –∞–≥–∞—Ä —Ñ–∏–ª–º “≥–∞–Ω”Ø–∑ –±–∞ “∑–∞–¥–≤–∞–ª –∏–ª–æ–≤–∞ –Ω–∞—à—É–¥–∞ –±–æ—à–∞–¥
    
    elif scheduled_publish: # –ë–∞—Ä–æ–∏ –Ω–∞—à—Ä–∏ –º—É“õ–∞—Ä—Ä–∞—Ä”£ –∞–∑ —Ä”Ø–∏ “∑–∞–¥–≤–∞–ª
        today = datetime.now().date().strftime('%Y-%m-%d')
        cursor.execute('''
            SELECT ps.id, m.title, m.description, m.file_id, m.file_type, ps.movie_id
            FROM publish_schedule ps
            JOIN movies m ON ps.movie_id = m.id
            WHERE ps.publish_date = ? AND ps.is_published = FALSE AND m.is_published = FALSE
            ORDER BY ps.id ASC LIMIT 1 
        ''', (today,)) # –¢–∞–Ω“≥–æ —è–∫—Ç–æ –¥–∞—Ä —è–∫ —Ä”Ø–∑
        result = cursor.fetchone()
        if result:
            schedule_id, title, description, file_id, file_type, movie_id = result
            movie_to_post = (movie_id, title, description, file_id, file_type)
            schedule_id_to_update = schedule_id

    if movie_to_post:
        movie_id, title, description, file_id, file_type = movie_to_post
        caption = f"üé¨ **{title}**\n\n{description if description else ''}\n\n–ö–∞–Ω–∞–ª–∏ –º–æ: {CHANNEL_USERNAME}"
        
        try:
            if file_type == 'video':
                bot.send_video(CHANNEL_USERNAME, file_id, caption=caption, parse_mode="Markdown")
            elif file_type == 'document':
                bot.send_document(CHANNEL_USERNAME, file_id, caption=caption, parse_mode="Markdown")
            
            # –ù–∏—à–æ–Ω–¥–æ–¥–∞–Ω–∏ “≥–∞–º—á—É–Ω –Ω–∞—à—Ä—à—É–¥–∞
            cursor.execute("UPDATE movies SET is_published = TRUE WHERE id = ?", (movie_id,))
            if schedule_id_to_update: # –ê–≥–∞—Ä –¥–∞—Ä “∑–∞–¥–≤–∞–ª –±–æ—à–∞–¥
                 cursor.execute("UPDATE publish_schedule SET is_published = TRUE WHERE id = ?", (schedule_id_to_update,))
            elif not scheduled_publish and movie_id_to_publish: # –ê–≥–∞—Ä –Ω–∞—à—Ä–∏ —Ñ–∞–≤—Ä”£ –≤–∞ –¥–∞—Ä “∑–∞–¥–≤–∞–ª –Ω–∞–±–æ—à–∞–¥, –æ–Ω—Ä–æ “≥–∞–º—á—É–Ω –Ω–∞—à—Ä—à—É–¥–∞ –∏–ª–æ–≤–∞ –º–µ–∫—É–Ω–µ–º
                cursor.execute('''
                    INSERT OR IGNORE INTO publish_schedule (movie_id, publish_date, is_published)
                    VALUES (?, ?, TRUE)
                ''', (movie_id, datetime.now().date().strftime('%Y-%m-%d')))

            conn.commit()
            bot.send_message(ADMIN_ID, f"‚úÖ –§–∏–ª–º–∏ '{title}' (ID: {movie_id}) –±–æ–º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç –¥–∞—Ä –∫–∞–Ω–∞–ª –Ω–∞—à—Ä —à—É–¥!")

            if scheduled_publish: # –¢–∞–Ω“≥–æ –±–∞—Ä–æ–∏ –Ω–∞—à—Ä–∏ –º—É“õ–∞—Ä—Ä–∞—Ä”£
                cursor.execute('SELECT COUNT(*) FROM publish_schedule WHERE is_published = FALSE')
                remaining = cursor.fetchone()[0]
                if remaining == 0:
                    bot.send_message(ADMIN_ID, "üéâ “≤–∞–º–∞–∏ —Ñ–∏–ª–º“≥–æ–∏ –±–∞ –Ω–∞“õ—à–∞ –≥–∏—Ä–∏—Ñ—Ç–∞—à—É–¥–∞ –Ω–∞—à—Ä —à—É–¥–∞–Ω–¥!")
            
        except Exception as e:
            bot.send_message(ADMIN_ID, f"‚ùå –•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ –Ω–∞—à—Ä–∏ —Ñ–∏–ª–º–∏ '{title}' (ID: {movie_id}): {str(e)}")
    
    conn.close()

# --- “≤–µ–Ω–¥–ª–µ—Ä“≥–æ–∏ Telegram ---
@bot.message_handler(commands=['start'])
def start_command(message):
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚õî –®—É–º–æ –∏“∑–æ–∑–∞—Ç–∏ –∏—Å—Ç–∏—Ñ–æ–¥–∞–∏ –∏–Ω –±–æ—Ç—Ä–æ –Ω–∞–¥–æ—Ä–µ–¥.")
        return
    
    clear_user_data(message.from_user.id)
    set_user_state(message.from_user.id, USER_STATE_NONE)
    bot.send_message(message.chat.id, 
                     "üëã –°–∞–ª–æ–º, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n\n"
                     "–ò–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥, –∫–∏ —á”£ –∫–æ—Ä –∫–∞—Ä–¥–∞–Ω –º–µ—Ö–æ“≥–µ–¥:",
                     reply_markup=create_main_menu())

@bot.message_handler(commands=['help'])
def help_command(message):
    if not is_admin(message.from_user.id): return
    help_text = (
        "üìñ **–î–∞—Å—Ç—É—Ä–∞–º–∞–ª–∏ –∫”Ø—Ç–æ“≥:**\n\n"
        "üîπ **‚ûï –ò–ª–æ–≤–∞–∏ —Ñ–∏–ª–º:** –ë–∞—Ä–æ–∏ –∏–ª–æ–≤–∞ –∫–∞—Ä–¥–∞–Ω–∏ —Ñ–∏–ª–º–∏ –Ω–∞–≤ –±–∞ –±–∞–∑–∞ –≤–∞ –±–∞ –Ω–∞“õ—à–∞ –≥–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ –æ–Ω.\n"
        "üîπ **üóì –†”Ø–π—Ö–∞—Ç–∏ –∏–Ω—Ç–∏–∑–æ—Ä”£:** –ù–∞–º–æ–∏—à–∏ —Ñ–∏–ª–º“≥–æ–µ, –∫–∏ –±–∞—Ä–æ–∏ –Ω–∞—à—Ä –¥–∞—Ä –Ω–∞–≤–±–∞—Ç–∞–Ω–¥.\n"
        "üîπ **üöÄ –ù–∞—à—Ä–∏ —Ñ–∞–≤—Ä”£:** –ò–Ω—Ç–∏—Ö–æ–± –≤–∞ –Ω–∞—à—Ä–∏ —Ñ–∞–≤—Ä–∏–∏ —è–∫ —Ñ–∏–ª–º.\n"
        "üîπ **üóëÔ∏è –¢–æ–∑–∞ –∫–∞—Ä–¥–∞–Ω–∏ —Ñ–∏–ª–º:** –¢–æ–∑–∞ –∫–∞—Ä–¥–∞–Ω–∏ —Ñ–∏–ª–º –∞–∑ –±–∞–∑–∞ –≤–∞ “∑–∞–¥–≤–∞–ª–∏ –Ω–∞—à—Ä.\n"
        "üîπ **üìä “≤–æ–ª–∞—Ç–∏ –±–æ—Ç:** –ú–∞—ä–ª—É–º–æ—Ç –¥–∞—Ä –±–æ—Ä–∞–∏ —Ñ–∏–ª–º“≥–æ–∏ –¥–∞—Ä –±–∞–∑–∞ –±—É–¥–∞.\n"
        "üîπ **‚Ü™Ô∏è –ë–µ–∫–æ—Ä –∫–∞—Ä–¥–∞–Ω:** –ë–∞—Ä–æ–∏ –±–µ–∫–æ—Ä –∫–∞—Ä–¥–∞–Ω–∏ –∞–º–∞–ª–∏—ë—Ç–∏ “∑–æ—Ä”£.\n"
        "üîπ **‚ùì –ö”Ø–º–∞–∫:** –ù–∞–º–æ–∏—à–∏ –∏–Ω –¥–∞—Å—Ç—É—Ä–∞–º–∞–ª.\n\n"
        f"üïí –§–∏–ª–º“≥–æ “≥–∞—Ä —Ä”Ø–∑ —Å–æ–∞—Ç–∏ 12:00 –±–∞ —Ç–∞–≤—Ä–∏ —Ö—É–¥–∫–æ—Ä –¥–∞—Ä –∫–∞–Ω–∞–ª–∏ {CHANNEL_USERNAME} –Ω–∞—à—Ä –º–µ—à–∞–≤–∞–Ω–¥."
    )
    bot.send_message(message.chat.id, help_text, parse_mode="Markdown", reply_markup=create_main_menu())

# “≤–µ–Ω–¥–ª–µ—Ä–∏ —É–º—É–º”£ –±–∞—Ä–æ–∏ –º–∞—Ç–Ω –≤–∞ —Ç—É–≥–º–∞“≥–æ
@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚õî –®—É–º–æ –∏“∑–æ–∑–∞—Ç–∏ –∏—Å—Ç–∏—Ñ–æ–¥–∞–∏ –∏–Ω –±–æ—Ç—Ä–æ –Ω–∞–¥–æ—Ä–µ–¥.")
        return

    user_id = message.from_user.id
    current_state = get_user_state(user_id)
    
    if message.text == "‚Ü™Ô∏è –ë–µ–∫–æ—Ä –∫–∞—Ä–¥–∞–Ω":
        clear_user_data(user_id)
        set_user_state(user_id, USER_STATE_NONE)
        bot.send_message(user_id, "üîÑ –ê–º–∞–ª–∏—ë—Ç –±–µ–∫–æ—Ä –∫–∞—Ä–¥–∞ —à—É–¥.", reply_markup=create_main_menu())
        return

    # --- –ê–º–∞–ª–∏—ë—Ç“≥–æ–∏ –∞—Å–æ—Å”£ ---
    if message.text == "‚ûï –ò–ª–æ–≤–∞–∏ —Ñ–∏–ª–º":
        set_user_state(user_id, USER_STATE_WAITING_MOVIE_FILE)
        user_data[user_id]['current_movie'] = {}
        bot.send_message(user_id, "üé¨ –§–∞–π–ª–∏ —Ñ–∏–ª–º—Ä–æ (–≤–∏–¥–µ–æ —ë “≥—É“∑“∑–∞—Ç) –∏—Ä—Å–æ–ª –∫—É–Ω–µ–¥:", reply_markup=create_cancel_keyboard())
    
    elif message.text == "üóì –†”Ø–π—Ö–∞—Ç–∏ –∏–Ω—Ç–∏–∑–æ—Ä”£":
        pending_movies = get_pending_movies()
        if not pending_movies:
            bot.send_message(user_id, "üì≠ “≤–æ–ª–æ —Ñ–∏–ª–º“≥–æ–∏ –¥–∞—Ä –Ω–∞–≤–±–∞—Ç–±—É–¥–∞ –º–∞–≤“∑—É–¥ –Ω–µ—Å—Ç–∞–Ω–¥.", reply_markup=create_main_menu())
            return
        
        response = "üóì **–§–∏–ª–º“≥–æ–∏ –¥–∞—Ä –Ω–∞–≤–±–∞—Ç–∏ –Ω–∞—à—Ä:**\n\n"
        for i, (movie_id, title, publish_date) in enumerate(pending_movies):
            try:
                # –¢–∞–±–¥–∏–ª–∏ —Å–∞–Ω–∞ –±–∞ —Ñ–æ—Ä–º–∞—Ç–∏ —Ö–æ–Ω–æ
                date_obj = datetime.strptime(publish_date, '%Y-%m-%d')
                formatted_date = date_obj.strftime('%d %B %Y')
            except ValueError:
                formatted_date = publish_date # –ê–≥–∞—Ä —Ñ–æ—Ä–º–∞—Ç –¥–∏–≥–∞—Ä –±–æ—à–∞–¥
            response += f"{i+1}. (ID: `{movie_id}`) **{title}** - {formatted_date}\n"
        
        # –ê–≥–∞—Ä —Ä”Ø–π—Ö–∞—Ç —Ö–µ–ª–µ –¥–∞—Ä–æ–∑ –±–æ—à–∞–¥, –æ–Ω—Ä–æ —Ç–∞“õ—Å–∏–º –∫–∞—Ä–¥–∞–Ω –ª–æ–∑–∏–º –º–µ–æ—è–¥.
        # “≤–æ–ª–æ, –∞–≥–∞—Ä –∞–∑ 4096 –∞–ª–æ–º–∞—Ç –∑–∏—ë–¥ –±–æ—à–∞–¥, –æ–≥–æ“≥”£ –º–µ–¥–∏“≥–µ–º.
        if len(response) > 4096:
            bot.send_message(user_id, response[:4090] + "\n...", parse_mode="Markdown", reply_markup=create_main_menu())
            bot.send_message(user_id, "‚ö†Ô∏è –†”Ø–π—Ö–∞—Ç —Ö–µ–ª–µ –¥–∞—Ä–æ–∑ –∞—Å—Ç, —Ç–∞–Ω“≥–æ “õ–∏—Å–º–µ –Ω–∏—à–æ–Ω –¥–æ–¥–∞ —à—É–¥.", reply_markup=create_main_menu())
        else:
            bot.send_message(user_id, response, parse_mode="Markdown", reply_markup=create_main_menu())

    elif message.text == "üöÄ –ù–∞—à—Ä–∏ —Ñ–∞–≤—Ä”£":
        set_user_state(user_id, USER_STATE_WAITING_PUBLISH_NOW_MOVIE_ID)
        bot.send_message(user_id, "üÜî ID-–∏ —Ñ–∏–ª–º–µ—Ä–æ, –∫–∏ –º–µ—Ö–æ“≥–µ–¥ “≥–æ–∑–∏—Ä –Ω–∞—à—Ä –∫—É–Ω–µ–¥, –≤–æ—Ä–∏–¥ –Ω–∞–º–æ–µ–¥ (–∞–∑ '–†”Ø–π—Ö–∞—Ç–∏ –∏–Ω—Ç–∏–∑–æ—Ä”£' —ë–±–µ–¥):", reply_markup=create_cancel_keyboard())

    elif message.text == "üóëÔ∏è –¢–æ–∑–∞ –∫–∞—Ä–¥–∞–Ω–∏ —Ñ–∏–ª–º":
        set_user_state(user_id, USER_STATE_WAITING_DELETE_MOVIE_ID)
        bot.send_message(user_id, "üÜî ID-–∏ —Ñ–∏–ª–º–µ—Ä–æ, –∫–∏ –º–µ—Ö–æ“≥–µ–¥ —Ç–æ–∑–∞ –∫—É–Ω–µ–¥, –≤–æ—Ä–∏–¥ –Ω–∞–º–æ–µ–¥ (–∞–∑ '–†”Ø–π—Ö–∞—Ç–∏ –∏–Ω—Ç–∏–∑–æ—Ä”£' —ë–±–µ–¥):", reply_markup=create_cancel_keyboard())
    
    elif message.text == "üìä “≤–æ–ª–∞—Ç–∏ –±–æ—Ç":
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute('SELECT COUNT(*) FROM movies')
        total_movies = cursor.fetchone()[0]
        cursor.execute('SELECT COUNT(*) FROM movies WHERE is_published = TRUE')
        published_movies = cursor.fetchone()[0]
        cursor.execute('SELECT COUNT(*) FROM publish_schedule WHERE is_published = FALSE')
        scheduled_movies = cursor.fetchone()[0]
        conn.close()
        status_text = (f"üìä **“≤–æ–ª–∞—Ç–∏ –±–æ—Ç:**\n\n"
                       f"üìπ –§–∏–ª–º“≥–æ–∏ —É–º—É–º”£ –¥–∞—Ä –±–∞–∑–∞: {total_movies}\n"
                       f"‚úÖ –§–∏–ª–º“≥–æ–∏ –Ω–∞—à—Ä—à—É–¥–∞: {published_movies}\n"
                       f"‚è≥ –§–∏–ª–º“≥–æ–∏ –¥–∞—Ä –Ω–∞–≤–±–∞—Ç–∏ –Ω–∞—à—Ä: {scheduled_movies}\n")
        bot.send_message(user_id, status_text, parse_mode="Markdown", reply_markup=create_main_menu())

    elif message.text == "‚ùì –ö”Ø–º–∞–∫":
        help_command(message)
        
    # --- –ò–¥–æ—Ä–∞–∫—É–Ω–∏–∏ “≥–æ–ª–∞—Ç“≥–æ ---
    elif current_state == USER_STATE_WAITING_MOVIE_TITLE:
        title = message.text.strip()
        if not title:
            bot.send_message(user_id, "‚ö†Ô∏è –ù–æ–º–∏ —Ñ–∏–ª–º –Ω–∞–º–µ—Ç–∞–≤–æ–Ω–∞–¥ —Ö–æ–ª”£ –±–æ—à–∞–¥. –õ—É—Ç—Ñ–∞–Ω –¥—É–±–æ—Ä–∞ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:", reply_markup=create_cancel_keyboard())
            return
        user_data[user_id]['current_movie']['title'] = title
        set_user_state(user_id, USER_STATE_WAITING_MOVIE_DESCRIPTION)
        bot.send_message(user_id, "üìù –¢–∞–≤—Å–∏—Ñ–∏ –º—É—Ö—Ç–∞—Å–∞—Ä–∏ —Ñ–∏–ª–º—Ä–æ –∏—Ä—Å–æ–ª –∫—É–Ω–µ–¥ (—ë '-' –±–∞—Ä–æ–∏ —Ç–∞–≤—Å–∏—Ñ–∏ —Ö–æ–ª”£):", reply_markup=create_cancel_keyboard())

    elif current_state == USER_STATE_WAITING_MOVIE_DESCRIPTION:
        description = message.text.strip()
        if description == '-':
            description = ""
        
        movie_data = user_data[user_id]['current_movie']
        movie_id = save_movie_to_db(movie_data['title'], description, movie_data['file_id'], movie_data['file_type'])
        
        if movie_id:
            publish_date = schedule_movie(movie_id)
            bot.send_message(user_id, 
                             f"‚úÖ –§–∏–ª–º–∏ '{movie_data['title']}' –±–æ–º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç —Å–∞–±—Ç —à—É–¥ (ID: {movie_id}).\n"
                             f"üìÖ –ë–∞—Ä–æ–∏ –Ω–∞—à—Ä –¥–∞—Ä —Å–∞–Ω–∞–∏ {publish_date.strftime('%d %B %Y')} –±–∞ –Ω–∞“õ—à–∞ –≥–∏—Ä–∏—Ñ—Ç–∞ —à—É–¥.", 
                             reply_markup=create_main_menu())
        else:
            bot.send_message(user_id, "‚ùå –•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ —Å–∞–±—Ç–∏ —Ñ–∏–ª–º. –õ—É—Ç—Ñ–∞–Ω –¥—É–±–æ—Ä–∞ –∫”Ø—à–∏—à –∫—É–Ω–µ–¥.", reply_markup=create_main_menu())
        
        clear_user_data(user_id)
        set_user_state(user_id, USER_STATE_NONE)

    elif current_state == USER_STATE_WAITING_DELETE_MOVIE_ID:
        try:
            movie_id_to_delete = int(message.text.strip())
            movie = get_movie_by_id(movie_id_to_delete)
            if movie:
                if delete_movie_from_db(movie_id_to_delete):
                    bot.send_message(user_id, f"üóëÔ∏è –§–∏–ª–º–∏ '{movie[1]}' (ID: {movie_id_to_delete}) –±–æ–º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç —Ç–æ–∑–∞ –∫–∞—Ä–¥–∞ —à—É–¥.", reply_markup=create_main_menu())
                else:
                    bot.send_message(user_id, f"‚ö†Ô∏è –•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ —Ç–æ–∑–∞ –∫–∞—Ä–¥–∞–Ω–∏ —Ñ–∏–ª–º (ID: {movie_id_to_delete}).", reply_markup=create_main_menu())
            else:
                bot.send_message(user_id, f"üö´ –§–∏–ª–º –±–æ ID: {movie_id_to_delete} —ë—Ñ—Ç –Ω–∞—à—É–¥.", reply_markup=create_main_menu())
        except ValueError:
            bot.send_message(user_id, "‚ö†Ô∏è ID-–∏ —Ñ–∏–ª–º –±–æ—è–¥ —Ä–∞“õ–∞–º –±–æ—à–∞–¥. –õ—É—Ç—Ñ–∞–Ω –¥—É–±–æ—Ä–∞ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:", reply_markup=create_cancel_keyboard())
            return # –î–∞—Ä “≥–∞–º–∏–Ω “≥–æ–ª–∞—Ç –º–µ–º–æ–Ω–µ–º
        
        clear_user_data(user_id) # –ë–∞—Ä–æ–∏ –∏–Ω –∞–º–∞–ª user_data –∏—Å—Ç–∏—Ñ–æ–¥–∞ –Ω–∞–º–µ—à–∞–≤–∞–¥, –∞–º–º–æ –±–∞—Ä–æ–∏ —É–Ω–∏—Ñ–∏–∫–∞—Ç—Å–∏—è
        set_user_state(user_id, USER_STATE_NONE)

    elif current_state == USER_STATE_WAITING_PUBLISH_NOW_MOVIE_ID:
        try:
            movie_id_to_publish = int(message.text.strip())
            movie = get_movie_by_id(movie_id_to_publish)
            if movie:
                if movie[0] in [m[0] for m in get_pending_movies()]: # –ê–≥–∞—Ä –¥–∞—Ä —Ä”Ø–π—Ö–∞—Ç–∏ –∏–Ω—Ç–∏–∑–æ—Ä”£ –±–æ—à–∞–¥
                     bot.send_message(user_id, f"‚è≥ –û–º–æ–¥–∞–≥”£ –±–∞ –Ω–∞—à—Ä–∏ —Ñ–∞–≤—Ä–∏–∏ —Ñ–∏–ª–º–∏ '{movie[1]}' (ID: {movie_id_to_publish})...", reply_markup=create_main_menu())
                     publish_movie_to_channel(movie_id_to_publish=movie_id_to_publish, scheduled_publish=False)
                else: # –ê–≥–∞—Ä –∞–ª–ª–∞–∫–∞–π –Ω–∞—à—Ä —à—É–¥–∞–∞—Å—Ç —ë –¥–∞—Ä “∑–∞–¥–≤–∞–ª –Ω–µ—Å—Ç, –∞–º–º–æ –¥–∞—Ä –±–∞–∑–∞ “≥–∞—Å—Ç
                    conn = sqlite3.connect(DB_NAME)
                    cursor = conn.cursor()
                    cursor.execute("SELECT is_published FROM movies WHERE id = ?", (movie_id_to_publish,))
                    is_already_published = cursor.fetchone()
                    conn.close()
                    if is_already_published and is_already_published[0]:
                         bot.send_message(user_id, f"‚ÑπÔ∏è –§–∏–ª–º–∏ '{movie[1]}' (ID: {movie_id_to_publish}) –∞–ª–ª–∞–∫–∞–π –Ω–∞—à—Ä —à—É–¥–∞–∞—Å—Ç.", reply_markup=create_main_menu())
                    else: # –î–∞—Ä –±–∞–∑–∞ “≥–∞—Å—Ç, –∞–º–º–æ –¥–∞—Ä “∑–∞–¥–≤–∞–ª –Ω–µ—Å—Ç –≤–∞ –Ω–∞—à—Ä –Ω–∞—à—É–¥–∞–∞—Å—Ç (“≥–æ–ª–∞—Ç–∏ –Ω–æ–¥–∏—Ä)
                        bot.send_message(user_id, f"‚è≥ –û–º–æ–¥–∞–≥”£ –±–∞ –Ω–∞—à—Ä–∏ —Ñ–∞–≤—Ä–∏–∏ —Ñ–∏–ª–º–∏ '{movie[1]}' (ID: {movie_id_to_publish})...", reply_markup=create_main_menu())
                        publish_movie_to_channel(movie_id_to_publish=movie_id_to_publish, scheduled_publish=False)

            else:
                bot.send_message(user_id, f"üö´ –§–∏–ª–º –±–æ ID: {movie_id_to_publish} —ë—Ñ—Ç –Ω–∞—à—É–¥.", reply_markup=create_main_menu())
        except ValueError:
            bot.send_message(user_id, "‚ö†Ô∏è ID-–∏ —Ñ–∏–ª–º –±–æ—è–¥ —Ä–∞“õ–∞–º –±–æ—à–∞–¥. –õ—É—Ç—Ñ–∞–Ω –¥—É–±–æ—Ä–∞ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:", reply_markup=create_cancel_keyboard())
            return
        
        clear_user_data(user_id)
        set_user_state(user_id, USER_STATE_NONE)
        
    # –ê–≥–∞—Ä —è–≥–æ–Ω —Ç—É–≥–º–∞–∏ –∞—Å–æ—Å”£ –ø–∞—Ö—à –Ω–∞—à—É–¥–∞ –±–æ—à–∞–¥ –≤–∞ “≥–æ–ª–∞—Ç–∏ –º—É–∞–π—è–Ω –Ω–∞–±–æ—à–∞–¥
    elif current_state == USER_STATE_NONE and message.text not in ["‚ûï –ò–ª–æ–≤–∞–∏ —Ñ–∏–ª–º", "üóì –†”Ø–π—Ö–∞—Ç–∏ –∏–Ω—Ç–∏–∑–æ—Ä”£", "üöÄ –ù–∞—à—Ä–∏ —Ñ–∞–≤—Ä”£", "üóëÔ∏è –¢–æ–∑–∞ –∫–∞—Ä–¥–∞–Ω–∏ —Ñ–∏–ª–º", "üìä “≤–æ–ª–∞—Ç–∏ –±–æ—Ç", "‚ùì –ö”Ø–º–∞–∫"]:
        bot.send_message(user_id, "ü§î –§–∞—Ä–º–æ–Ω–∏ –Ω–æ–º–∞—ä–ª—É–º. –õ—É—Ç—Ñ–∞–Ω –∞–∑ —Ç—É–≥–º–∞“≥–æ–∏ –º–µ–Ω—é –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±–∞—Ä–µ–¥ —ë /help -—Ä–æ –ø–∞—Ö—à –∫—É–Ω–µ–¥.", reply_markup=create_main_menu())


@bot.message_handler(content_types=['video', 'document'])
def handle_media_files(message):
    if not is_admin(message.from_user.id): return
    user_id = message.from_user.id

    if get_user_state(user_id) == USER_STATE_WAITING_MOVIE_FILE:
        if message.content_type == 'video':
            file_id = message.video.file_id
            file_type = 'video'
        elif message.content_type == 'document':
            file_id = message.document.file_id
            file_type = 'document'
        else: # –ù–∞–±–æ—è–¥ —Ä”Ø–π –¥–∏“≥–∞–¥, –∑–µ—Ä–æ content_types —Ñ–∏–ª—Ç—Ä –º–µ–∫—É–Ω–∞–¥
            bot.send_message(user_id, "‚ö†Ô∏è –õ—É—Ç—Ñ–∞–Ω —Ñ–∞–π–ª–∏ –≤–∏–¥–µ–æ —ë “≥—É“∑“∑–∞—Ç—Ä–æ –∏—Ä—Å–æ–ª –∫—É–Ω–µ–¥.", reply_markup=create_cancel_keyboard())
            return

        user_data[user_id].setdefault('current_movie', {})['file_id'] = file_id
        user_data[user_id]['current_movie']['file_type'] = file_type
        
        set_user_state(user_id, USER_STATE_WAITING_MOVIE_TITLE)
        bot.send_message(user_id, "‚úÖ –§–∞–π–ª “õ–∞–±—É–ª —à—É–¥!\n\nüñãÔ∏è –ê–∫–Ω—É–Ω –Ω–æ–º–∏ —Ñ–∏–ª–º—Ä–æ –∏—Ä—Å–æ–ª –∫—É–Ω–µ–¥:", reply_markup=create_cancel_keyboard())
    else:
        # –ê–≥–∞—Ä –∫–æ—Ä–±–∞—Ä —Ñ–∞–π–ª—Ä–æ –¥–∞—Ä “≥–æ–ª–∞—Ç–∏ –Ω–æ–¥—É—Ä—É—Å—Ç —Ñ–∏—Ä–∏—Å—Ç–∞–¥
        bot.send_message(user_id, "‚ö†Ô∏è “≤–æ–ª–æ –º–∞–Ω –∏–Ω —Ñ–∞–π–ª—Ä–æ –∏–Ω—Ç–∏–∑–æ—Ä –Ω–∞–±—É–¥–∞–º. –ê–≥–∞—Ä —Ñ–∏–ª–º –∏–ª–æ–≤–∞ –∫–∞—Ä–¥–∞ –∏—Å—Ç–æ–¥–∞ –±–æ—à–µ–¥, –ª—É—Ç—Ñ–∞–Ω –∞–∑ –∞–≤–≤–∞–ª –±–æ –ø–∞—Ö—à–∏ '‚ûï –ò–ª–æ–≤–∞–∏ —Ñ–∏–ª–º' –æ“ì–æ–∑ –∫—É–Ω–µ–¥.", reply_markup=create_main_menu())


# --- –§—É–Ω–∫—Å–∏—è–∏ –∑–∞–º–∏–Ω–∞–≤”£ –±–∞—Ä–æ–∏ –±–∞–Ω–∞“õ—à–∞–≥–∏—Ä”£ ---
def run_scheduler():
    schedule.every().day.at("12:00").do(publish_movie_to_channel, scheduled_publish=True) 
    # –®—É–º–æ –º–µ—Ç–∞–≤–æ–Ω–µ–¥ –≤–∞“õ—Ç–∏ –¥–∏–≥–∞—Ä—Ä–æ –º—É“õ–∞—Ä—Ä–∞—Ä –∫—É–Ω–µ–¥, –º–∞—Å–∞–ª–∞–Ω: schedule.every().monday.at("10:30").do(job)
    
    bot.send_message(ADMIN_ID, f"‚è∞ –ë–∞–Ω–∞“õ—à–∞–≥–∏—Ä–∞–Ω–¥–∞–∏ –Ω–∞—à—Ä —Ñ–∞—ä–æ–ª —à—É–¥. –§–∏–ª–º“≥–æ “≥–∞—Ä —Ä”Ø–∑ —Å–æ–∞—Ç–∏ 12:00 –Ω–∞—à—Ä –º–µ—à–∞–≤–∞–Ω–¥.")
    while True:
        schedule.run_pending()
        time.sleep(60) # “≤–∞—Ä –¥–∞“õ–∏“õ–∞ —Å–∞–Ω“∑–∏—à

# --- –û“ì–æ–∑–∏ –±–æ—Ç ---
if __name__ == "__main__":
    print("ü§ñ –ë–æ—Ç –±–æ —Ñ—É–Ω–∫—Å–∏—è“≥–æ–∏ “∑–∞–∑–æ–±—Ç–∞—Ä –æ“ì–æ–∑ —à—É–¥...")
    bot.infinity_polling()
